@page "/viewer"
@page "/viewer/{TableId}"
@layout EmptyLayout
@using Microsoft.AspNetCore.SignalR.Client
@using TableIT.Core
@using TableIT.Core.Messages
@using TableIT.Web.Data

<div style="visibility:@(Client is null ? "collapse" : "visible")">
    <p>@Status</p>
    <img src="@ImageSource" />
</div>
<center style="visibility: @(Client is null ? "visible" : "collapse")">
    <h1>TableIT Connect</h1>
    <EditForm Model="@Model" OnValidSubmit="@OnConnect">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <InputText id="tableId" @bind-Value="Model.TableId" style="text-transform: uppercase;" spellcheck="false" placeholder="Table ID"/>

        <button type="submit">Connect</button>
    </EditForm>
</center>


@code {
    private TableClient? Client { get; set; }
    public string ImageSource { get; set; } = "";
    public string Status { get; set; } = "";
    private ViewerModel Model { get; set; } = new();
    [Parameter]
    public string? TableId { get; set; }

    private void OnLoadImage(LoadImageMessage message)
    {
        Status = "Image changed";
        if (message is { ImageId: not null } &&
            Client?.GetImageUrl(message.ImageId) is { } url)
        {
            ImageSource = url;
        }
        _ = InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private async Task OnConnect()
    {
        if (Client is { } client)
        {
            await client.DisposeAsync();
        }
        if (string.IsNullOrWhiteSpace(Model.TableId)) return;
        Client = new TableClient(userId: Model.TableId!.ToUpperInvariant());
        Status = $"Connecting to table {Client.UserId}";
        try
        {
            await Client.StartAsync();

            if (!await Client.PingTable())
            {
                Status = $"No table found at {Client.UserId}";
                await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
                await Task.Delay(TimeSpan.FromSeconds(2));
                await Client.DisposeAsync();
                Client = null;
                return;
            }

            Client.RegisterTableMessage<LoadImageMessage>(OnLoadImage);

            Status = "Getting table configuration";
            if (await Client.GetTableConfiguration() is { } tableConfig)
            {
                if (!string.IsNullOrWhiteSpace(tableConfig.CurrentResourceId))
                {
                    ImageSource = Client.GetImageUrl(tableConfig.CurrentResourceId);
                    Status = "Done";
                }
                else
                {
                    Status = "No current image";
                }
            }
            else
            {
                Status = $"Configuration failed to load from table {Client.UserId}";
            }
        }
        catch(Exception e)
        {
            Status = "ERROR: " + e.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Model.TableId = TableId;
        await base.OnInitializedAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (Client is { } client)
        {
            await client.DisposeAsync();
        }
    }
}
