@page "/remote"
@page "/remote/{TableId}"
@using System.Security.Claims
@using Azure.Identity
@using Azure.Storage.Blobs
@using Azure.Storage.Blobs.Models
@using TableIT.Core
@using TableIT.Core.Messages
@using TableIT.Web.Data
@*@layout EmptyLayout*@

<div style="visibility:@(Client is null ? "collapse" : "visible")">
    <div class="container">
        <div class="row">
            <div class="col-6">
                <p>@Status</p>
            </div>
        </div>
        <div class="row">
            <div class="col-5">
                <Virtualize Items="@Images">
                    <div class="row">
                        <div class="col">
                            <a href="javascript: void(0)" @onclick="@(e => OpenImage(context.Id))">@context.Name</a>
                        </div>
                        <div class="col">
                            <img src="@Client?.GetImageUrl(context.Id ?? "", height:30)" height="30"/>
                        </div>
                    </div>
                </Virtualize>
            </div>
            <div class="col-7">
                <div class="row">
                    <div class="col" />
                    <div class="col">
                        <button @onclick="MoveUp">Up</button>
                    </div>
                    <div class="col" />
                </div>
                <div class="row">
                    <div class="col">
                        <button @onclick="MoveLeft">Left</button>
                    </div>
                    <div class="col">
                        <button @onclick="Rotate">Rotate</button>
                    </div>
                    <div class="col">
                        <button @onclick="MoveRight">Right</button>
                    </div>
                </div>
                <div class="row">
                    <div class="col" />
                    <div class="col">
                        <button @onclick="MoveDown">Down</button>
                    </div>
                    <div class="col" />
                </div>

                <div class="row">
                    <div class="col">
                        <button @onclick="ZoomOut">Zoom Out</button>
                    </div>
                    <div class="col">
                        <button @onclick="ZoomFit">Zoom to Fit</button>
                    </div>
                    <div class="col">
                        <button @onclick="ZoomIn">Zoom In</button>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>
<center style="visibility: @(Client is null ? "visible" : "collapse")">
    <h1>TableIT Connect</h1>
    <EditForm Model="@Model" OnValidSubmit="@OnConnect">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <InputText id="tableId" @bind-Value="Model.TableId" style="text-transform: uppercase;" spellcheck="false" placeholder="Table ID" />

        <button type="submit">Connect</button>
    </EditForm>
</center>

@code {
    private TableClient? Client { get; set; }
    private string Status { get; set; } = "";
    [ParameterAttribute]
    public string? TableId { get; set; }
    private RemoteModel Model { get; set; } = new();
    private List<ImageData> Images { get; set; } = new();

    private async Task MoveUp()
    {
        await OnClient(client => client.SendPan(null, -20));
    }

    private async Task MoveDown()
    {
        await OnClient(client => client.SendPan(null, 20));
    }

    private async Task MoveLeft()
    {
        await OnClient(client => client.SendPan(-20, null));
    }

    private async Task MoveRight()
    {
        await OnClient(client => client.SendPan(20, null));
    }

    private async Task ZoomOut()
    {
        await OnClient(client => client.SendZoom(-0.1f));
    }

    private async Task ZoomFit()
    {
        await OnClient(client => client.SendZoom(-0.1f));
    }

    private async Task ZoomIn()
    {
        await OnClient(client => client.SendZoom(0.1f));
    }

    private async Task Rotate()
    {
        await OnClient(client => client.SendRotate(90));
    }

    private async Task OpenImage(string? imageId)
    {
        if (string.IsNullOrWhiteSpace(imageId)) return;
        await OnClient(client => client.SetCurrentImage(imageId!));
    }

    private async Task OnClient(Func<TableClient, Task> action)
    {
        if (Client is { } client)
        {
            await action(client);
        }
    }

    private async Task OnConnect()
    {
        if (Client is { } client)
        {
            await client.DisposeAsync();
        }
        if (string.IsNullOrWhiteSpace(Model.TableId)) return;
        Status = "Connecting";

        Client = new TableClient(userId: Model.TableId!.ToUpperInvariant());
        try
        {
            await Client.StartAsync();

            if (!await Client.PingTable())
            {
                Status = $"No table found at {Client.UserId}";
                await Client.DisposeAsync();
                Client = null;
                return;
            }
            Status = "Connected";
            Images = (await Client.GetImages()).ToList();
        }
        catch (Exception e)
        {
            Status = "ERROR: " + e.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Model.TableId = TableId;
        await base.OnInitializedAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (Client is { } client)
        {
            await client.DisposeAsync();
        }
    }
}
