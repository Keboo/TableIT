@page "/remote"
@page "/remote/{TableId}"

@using System.Security.Claims
@using TableIT.Client.Data;
@using TableIT.Shared;
@using TableIT.Shared.Resources;

@inject ITableRemoteConnection Client;
@inject IImageService ImageService;
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager;

<PageTitle>TableIT Remote</PageTitle>


<div style="visibility:@(!Client.IsConnected ? "collapse" : "visible")">
    <MudGrid Justify="Justify.FlexStart">
        @*<MudItem xs="12">
        @Status
        </MudItem>*@
        <MudItem xs="4">
            <MudStack Spacing="0">
                <MudVirtualize Items="@Images" Context="image">
                    <MudStack Spacing="0">
                        <MudImage Src="@(ImageService.GetImageUrl(image.ResourceId ?? "", height: 30))" Height="30" Width="30" ObjectFit="ObjectFit.ScaleDown"></MudImage>
                        <MudLink OnClick="() => OpenImage(image.ResourceId)">@image.DisplayName</MudLink>
                    </MudStack>
                </MudVirtualize>
            </MudStack>
        </MudItem>
        <MudItem xs="8">
            <MudGrid Justify="Justify.Center">
                <MudItem xs="12">
                    <MudGrid Justify="Justify.Center">
                        <MudItem xs="4" />
                        <MudItem xs="4">
                            <MudButton @onclick="MoveUp" Color="Color.Primary" Variant="Variant.Filled">Up</MudButton>
                        </MudItem>
                        <MudItem xs="4" />

                        <MudItem xs="4">
                            <MudButton @onclick="MoveLeft" Color="Color.Primary" Variant="Variant.Filled">Left</MudButton>
                        </MudItem>
                        <MudItem xs="4">
                            <MudButton @onclick="Rotate" Color="Color.Primary" Variant="Variant.Filled">Rotate</MudButton>
                        </MudItem>
                        <MudItem xs="4">
                            <MudButton @onclick="MoveRight" Color="Color.Primary" Variant="Variant.Filled">Right</MudButton>
                        </MudItem>
                        <MudItem xs="4" />
                        <MudItem xs="4">
                            <MudButton @onclick="MoveDown" Color="Color.Primary" Variant="Variant.Filled">Down</MudButton>
                        </MudItem>
                        <MudItem xs="4" />
                        <MudItem xs="4">
                            <MudButton @onclick="ZoomOut" Color="Color.Primary" Variant="Variant.Filled">Zoom Out</MudButton>
                        </MudItem>
                        <MudItem xs="4">
                            <MudButton @onclick="ZoomFit" Color="Color.Primary" Variant="Variant.Filled">Zoom to Fit</MudButton>
                        </MudItem>
                        <MudItem xs="4">
                            <MudButton @onclick="ZoomIn" Color="Color.Primary" Variant="Variant.Filled">Zoom In</MudButton>
                        </MudItem>
                        <MudItem xs="12">
                            <MudButton @onclick="ApplyPreview" Color="Color.Primary" Variant="Variant.Filled">Apply Preview</MudButton>
                        </MudItem>
                    </MudGrid>
                </MudItem>
                <MudItem xs="12">
                    <MudImage Src="@PreviewImageSource" Height="300" Width="300" ObjectFit="ObjectFit.ScaleDown"></MudImage>
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>
</div>
<center style="visibility: @(!Client.IsConnected ? "visible" : "collapse")">
    <h1>TableIT Remote</h1>
    <EditForm Model="@Model" OnValidSubmit="@OnConnect">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <MudCard>
            <MudCardContent>
                <MudTextField Label="Table Id"
                              Style="text-transform: uppercase;"
                              spellcheck="false"
                              MaxLength="6"
                              Variant="Variant.Outlined"
                              Margin="Margin.Dense"
                              @bind-Value="Model.TableId" For="@(() => Model.TableId)" />
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Submit</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
</center>

@code {
    private string Status { get; set; } = "";
    private string? PreviewImageId { get; set; }
    public string PreviewImageSource { get; set; } = "";
    [ParameterAttribute]
    public string? TableId { get; set; }
    private RemoteModel Model { get; set; } = new();
    private List<ImageResource> Images { get; set; } = new();

    private async Task MoveUp()
    {
        await OnClient(client => client.SendPanAsync(null, -20));
    }

    private async Task MoveDown()
    {
        await OnClient(client => client.SendPanAsync(null, 20));
    }

    private async Task MoveLeft()
    {
        await OnClient(client => client.SendPanAsync(-20, null));
    }

    private async Task MoveRight()
    {
        await OnClient(client => client.SendPanAsync(20, null));
    }

    private async Task ZoomIn()
    {
        await OnClient(client => client.SendZoomAsync(0.1f));
    }
    
    private async Task ZoomOut()
    {
        await OnClient(client => client.SendZoomAsync(-0.1f));
    }

    private async Task ZoomFit()
    {
        await OnClient(client => client.SendZoomToFitAsync());
    }


    private async Task Rotate()
    {
        await OnClient(client => client.SendRotateAsync(90));
    }

    private async Task ApplyPreview()
    {
        if (string.IsNullOrWhiteSpace(PreviewImageId)) return;
        await OnClient(client => client.SetCurrentImage(PreviewImageId));
    }

    private void OpenImage(string? imageId)
    {
        PreviewImageId = imageId;
        if (string.IsNullOrWhiteSpace(imageId)) return;
        PreviewImageSource = ImageService?.GetImageUrl(imageId) ?? "";
        _ = InvokeAsync(() =>
        {
            StateHasChanged();
        });

    }

    private async Task OnClient(Func<ITableRemoteConnection, Task> action)
    {
        if (Client is { } client)
        {
            await action(client);
        }
    }

    private void OnConnect()
    {
        if (string.IsNullOrWhiteSpace(Model.TableId)) return;
        NavigationManager.NavigateTo($"/remote/{Model.TableId}", true);
    }

    private async Task DoConnection()
    {
        string? tableId = Model.TableId?.ToUpperInvariant();
        if (string.IsNullOrWhiteSpace(tableId)) return;

        Status = "Connecting";
        if (Client.IsConnected)
        {
            await Client.DisconnectAsync();
        }

        try
        {
            if (!await Client.ConnectAsync(tableId))
            {
                Status = $"No table found at {tableId}";
                return;
            }
            Status = "Connected";
            Images = (await ImageService.GetImageResourcesAsync() ?? Array.Empty<ImageResource>()).ToList();
        }
        catch (Exception e)
        {
            Status = "ERROR: " + e.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Model.TableId = TableId;
        await base.OnInitializedAsync();
        await DoConnection();
    }

    public async ValueTask DisposeAsync()
    {
        if (Client is { } client)
        {
            await client.DisconnectAsync();
        }
    }
}
