@using TableIT.Functions.ViewModels
@model ViewerViewModel;
<!DOCTYPE html>
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1">  
<title>TableIT Viewer </title>  
<style>
body {  
  font-family: Calibri, Helvetica, sans-serif;
  background-color: #202020;
  color: #DDDDDD;
}
</style>
</head> 
<body>
    Table: @Model.TableId<br/>
    <img id="resourceImage"/>
</body>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.js"></script>

<script type="text/javascript">
window.addEventListener('load', (event) => {
    console.log('The page has fully loaded');
    const endpoint = "https://tableitfunctions.azurewebsites.net/api";
    var configMessageId = createGuid();

    const connection = new signalR.HubConnectionBuilder()
    .withUrl(endpoint, {
        accessTokenFactory: function() {
            return generateJwt()
        }
    })
    .configureLogging(signalR.LogLevel.Information)
    .build();

    async function start() {
        try {
            await connection.start();
            console.log("SignalR Connected.");
            //Get the current config
            connection.invoke('requestmessage', JSON.stringify({
                "GroupId": configMessageId,
                "Data":"{}",
                "DataType":"TableIT.Core.Messages.TableConfigurationRequest"
            }));
        } catch (err) {
            console.log(err);
            setTimeout(start, 5000);
        }
    };

    function generateJwt() {

        // The header typically consists of two parts: 
        // the type of the token, which is JWT, and the signing algorithm being used, 
        // such as HMAC SHA256 or RSA.
        const header = {
          "alg": "none",
          "typ": "JWT",
        }
        var encodedHeaders = btoa(JSON.stringify(header))

        // Remove padding equal characters
        encodedHeaders = encodedHeaders.replace(/=+$/, '');

        // Replace characters according to base64url specifications
        encodedHeaders = encodedHeaders.replace(/\+/g, '-');
        encodedHeaders = encodedHeaders.replace(/\//g, '_');

        var iat = Math.floor(Date.now() / 1000);
        // The second part of the token is the payload, which contains the claims.
        // Claims are statements about an entity (typically, the user) and 
        // additional data. There are three types of claims: 
        // registered, public, and private claims.
        const claims = {
            "tableid": "@Model.TableId",
            "nbf": iat,
            "exp": iat + (60 * 60),
            "iat": iat
        }
        var encodedPlayload = btoa(JSON.stringify(claims))
        // Remove padding equal characters
        encodedPlayload = encodedPlayload.replace(/=+$/, '');

        // Replace characters according to base64url specifications
        encodedPlayload = encodedPlayload.replace(/\+/g, '-');
        encodedPlayload = encodedPlayload.replace(/\//g, '_');

        const jwt = `${encodedHeaders}.${encodedPlayload}.`
        console.log(jwt)

        return jwt
    }

    connection.onclose(async () => {
        await start();
    });

    connection.on('responsemessage', (msg) => {
        console.log("Got message");
        console.log(msg);
        var message = JSON.parse(msg);
        if (message.GroupId == configMessageId) {
            var payload = JSON.parse(message.Data);
            if (payload.Config.CurrentResourceId) {
                var image = document.getElementById("resourceImage");
                image.src = `${endpoint}/resources/${payload.Config.CurrentResourceId}`
            }
            configMessageId = null;
        }
    });

    function createGuid() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c)
        {
            var r = Math.random()*16|0, v = c === 'x' ? r : (r&0x3|0x8);
            return v.toString(16);
        });
    }

    // Start the connection.
    start();
});
</script>
</html>